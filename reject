Displaying products

<!-- {% for product in product_list %}
    
    <div style="display: inline-block; width: 200px; vertical-align: top;">
      <form action="/bookmark" method="POST">
        <input type="hidden" name="bookmark" value="{{ product.asin }}">
        <input type="hidden" name="event_id" value="{{ event.event_id}}">
        <input type="submit" value="Bookmark">
      </form>
      <a href="/similar?product={{ product.asin }}">
        <p>{{ product.title }}</p>
        </a>
        <img src="{{ product.medium_image_url }}">

    </div>
  
{% endfor %} -->


Server Routes

# @app.route("/like", methods=["POST"])
# def like_product():
#     """Add products the user likes to presents table in database."""

#     like = request.form.get("like")
#     event_id = request.form.get("event_id")
#     print event_id

#     product = amazonapi.lookup(like)

#     existing_product = Present.query.filter_by(present_id=product.asin, event_id=event_id).first()

#     if existing_product:
#         flash("You have already liked this product.")
#     else:
#         new_product = Present(present_id=product.asin, event_id=event_id,
#                               present_name=product.title, url=product.detail_page_url,
#                               img_url=product.medium_image_url)

#         db.session.add(new_product)
#         db.session.commit()

#     return redirect(request.referrer)





# @app.route("/search")
# def search_amazon():
#     """Search Amazon for products."""

#     name = request.args.get("name")
#     category = request.args.get("category")

#     products = amazonapi.search(name, category)

#     return render_template("search.html", products=products)



# @app.route("/search2")
# def search2():
#     """Test search."""

#     return render_template("search2.html", category_list=category_list)




def get_json(products, compact=False):
    """Return json."""

    product_list = []

    for product in products:
        # prod_dict = product.get_attributes(["Title"])

        prod_dict = {"id": product.asin, "title": product.title,
                     "url": product.detail_page_url, "img_url": product.medium_image_url}

        product_list.append(prod_dict)

    if compact:
        return jsonify({'data': product_list, "error": None})
    else:
        return json.dumps({'data': product_list, "error": None})



# @app.route("/add-interest", methods=["GET"])
# def show_interest():
#     """Show interest form."""

#     contact_id = request.args.get("contact_id")

#     contact = Contact.query.get(contact_id)

#     interests = contact.intensities

#     return render_template("interest.html", contact=contact, category_list=category_list,
#                            interests=interests)



@app.route("/event/<event_id>")
def show_event_details(event_id):
    """Show event details."""

    event = Event.query.get(event_id)
    interests = event.contact.interests
    product_list = []

    presents = db.session.query(Present,
                                Event.event_id,
                                Status.status_name).join(PresentEvent).join(Event).join(Status).filter(Event.event_id == event_id)

    selected = presents.filter(Status.status_name == "selected").all()
    past = presents.filter(Status.status_name == "past").all()
    bookmarked = presents.filter(Status.status_name == "bookmarked").all()

    # for interest in interests:
    #     products = amazonapi.search_limit(10, interest.name, interest.category)

    #     for product in products:

    #         product_list.append(product)

    for interest in interests:
        info = json.loads(interest.data)
        product_list.append(info["data"])

    return render_template("event_details.html", event=event,
                           product_list=product_list, selected=selected, past=past,
                           bookmarked=bookmarked)


# @app.route("/notification", methods=["POST"])
# def set_notification():
#     reminder = request.form.get("reminder")

#     for contact in g.current_user.contacts:
#         for event in contact.events:
#             event.notification = reminder

#     db.session.commit()


#     for contact in g.current_user.contacts:
#         print contact.events

#     return redirect(request.referrer)


# @app.route("/contact.json")
# def show_contact() {
#     contact_id = request.args.get("contactId")

#     contact = Contact.query.get(contact_id)

# }



@app.route("/user/<user_id>")
@login_required
def show_user_page(user_id):
    """Show user page."""

    # user = User.query.get(user_id)
    products = Present.query.filter_by(user_id=user_id).all()

    contacts = db.session.query(Contact.contact_id).filter_by(user_id=user_id).all()

    # events = Event.query.filter(Event.contact_id.in_(contacts)).all()

    current_datetime = datetime.now()
    current_month = current_datetime.month
    current_year = current_datetime.year

    current_events = Event.query.filter(Event.contact_id.in_(contacts),
                                        extract("month", Event.date) == current_month,
                                        extract("year", Event.date) == current_year).all()

    return render_template("home.html", user=g.current_user, products=products,
                           current_events=current_events, category_list=category_list)


@app.route("/bookmark", methods=["POST"])
def bookmark_product():
    """Add products the user bookmarks to presents table in database."""

    product_id = request.form.get("product_id")
    event_id = request.form.get("event_id")
    status_name = request.form.get("status_name")
    
    product = amazonapi.lookup(product_id)

    # existing_product = Present.query.filter_by(present_id=product.asin, event_id=event_id).first()

    # existing_product = db.session.query(Present.present_id,
    #                                     Event.event_id).join(PresentEvent).join(Event).filter(Present.present_id == product.asin, Event.event_id == event_id).first()

    existing_product = db.session.query(Present.present_id,
                                        Status.status_name,
                                        Event.event_id).join(Status).join(PresentEvent).join(Event).filter(Present.present_id == product.asin,
                                                                                                           Event.event_id == event_id)

    if existing_product.filter(Status.status_name == status_name).first():
        flash("You have already liked this product.")

    elif existing_product.first():
        existing_present = Present.query.filter_by(present_id=product_id).first()
        status_id = db.session.query(Status.status_id).filter(Status.status_name == status_name).first()
        existing_present.status_id = status_id

        db.session.commit()

    else:
        status_id = db.session.query(Status.status_id).filter(Status.status_name == status_name).first()
        new_product = Present(present_id=product.asin, status_id=status_id, present_name=product.title,
                              url=product.detail_page_url, img_url=product.medium_image_url)

        db.session.add(new_product)
        db.session.commit()

        new_presentevent = PresentEvent(present_id=product.asin, event_id=event_id)

        db.session.add(new_presentevent)
        db.session.commit()

    return redirect(request.referrer)